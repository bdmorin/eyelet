{
  "timestamp": "2025-07-29T16:25:42.915795",
  "timestamp_unix": 1753824342.915795,
  "hook_type": "PostToolUse",
  "tool_name": "Read",
  "session_id": "54fdad9f-00f2-4c7a-8f11-7da7b149c513",
  "transcript_path": "/Users/bdmorin/.claude/projects/-Users-bdmorin-src-claude-hooks/54fdad9f-00f2-4c7a-8f11-7da7b149c513.jsonl",
  "cwd": "/Users/bdmorin/src/claude-hooks",
  "environment": {
    "python_version": "3.12.10 (main, Apr  9 2025, 03:49:38) [Clang 20.1.0 ]",
    "platform": "darwin",
    "eyelet_version": "0.2.0",
    "env_vars": {
      "CLAUDE_CODE_ENTRYPOINT": "cli",
      "CLAUDE_PROJECT_DIR": "/Users/bdmorin/src/claude-hooks",
      "CLAUDE_CODE_ENABLE_TELEMETRY": "1"
    }
  },
  "input_data": {
    "session_id": "54fdad9f-00f2-4c7a-8f11-7da7b149c513",
    "transcript_path": "/Users/bdmorin/.claude/projects/-Users-bdmorin-src-claude-hooks/54fdad9f-00f2-4c7a-8f11-7da7b149c513.jsonl",
    "cwd": "/Users/bdmorin/src/claude-hooks",
    "hook_event_name": "PostToolUse",
    "tool_name": "Read",
    "tool_input": {
      "file_path": "/Users/bdmorin/src/claude-hooks/src/eyelet/services/sqlite_logger.py",
      "offset": 70,
      "limit": 100
    },
    "tool_response": {
      "type": "text",
      "file": {
        "filePath": "/Users/bdmorin/src/claude-hooks/src/eyelet/services/sqlite_logger.py",
        "content": "\n    def _get_hostname(self) -> str:\n        \"\"\"Get hostname safely.\"\"\"\n        try:\n            return socket.gethostname()\n        except:\n            return \"unknown\"\n\n    def _get_ip_address(self) -> str:\n        \"\"\"Get IP address safely.\"\"\"\n        try:\n            hostname = socket.gethostname()\n            return socket.gethostbyname(hostname)\n        except:\n            return \"unknown\"\n\n    @sqlite_retry(max_attempts=10, base_delay=0.05)\n    def log_hook(self, hook_data: HookData) -> bool:\n        \"\"\"Log hook data to SQLite with automatic retry.\n        \n        Args:\n            hook_data: Hook data to log\n            \n        Returns:\n            True if successful, False otherwise\n        \n        Raises:\n            sqlite3.OperationalError: If database is locked after all retries\n        \"\"\"\n        # Extract core fields for indexing\n        timestamp = hook_data.timestamp_unix\n        timestamp_iso = hook_data.timestamp\n        session_id = hook_data.session_id\n        hook_type = hook_data.hook_type\n        tool_name = hook_data.tool_name or None\n        status = hook_data.execution.status if hook_data.execution else \"unknown\"\n        duration_ms = hook_data.execution.duration_ms if hook_data.execution else None\n        hostname = self._get_hostname()\n        ip_address = self._get_ip_address()\n        project_dir = str(hook_data.cwd)\n\n        # Full data as JSON (with Path conversion)\n        data_dict = hook_data.model_dump()\n        # Convert Path objects to strings\n        if 'cwd' in data_dict and hasattr(data_dict['cwd'], '__fspath__'):\n            data_dict['cwd'] = str(data_dict['cwd'])\n        data_json = json.dumps(data_dict, default=str)\n\n        # SQL insert statement\n        sql = \"\"\"\n        INSERT INTO hooks (\n            timestamp, timestamp_iso, session_id, hook_type, tool_name,\n            status, duration_ms, hostname, ip_address, project_dir, data\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n        \"\"\"\n\n        values = (\n            timestamp, timestamp_iso, session_id, hook_type, tool_name,\n            status, duration_ms, hostname, ip_address, project_dir, data_json\n        )\n\n        try:\n            conn = self._conn_manager.connection\n            conn.execute(sql, values)\n            return True\n        except Exception:\n            # Re-raise to trigger retry decorator\n            raise\n\n    def query_hooks(\n        self,\n        hook_type: str | None = None,\n        tool_name: str | None = None,\n        session_id: str | None = None,\n        since: datetime | None = None,\n        limit: int = 100\n    ) -> list[dict[str, Any]]:\n        \"\"\"Query hooks from database.\n        \n        Args:\n            hook_type: Filter by hook type\n            tool_name: Filter by tool name\n            session_id: Filter by session ID\n            since: Filter by timestamp (hooks after this time)\n            limit: Maximum number of results\n            \n        Returns:\n            List of hook records\n        \"\"\"\n        conditions = []\n        params = []\n\n        if hook_type:\n            conditions.append(\"hook_type = ?\")\n            params.append(hook_type)\n\n        if tool_name:\n            conditions.append(\"tool_name = ?\")\n            params.append(tool_name)\n",
        "numLines": 100,
        "startLine": 70,
        "totalLines": 236
      }
    }
  },
  "metadata": {
    "log_file": "/Users/bdmorin/src/claude-hooks/eyelet-hooks/PostToolUse/Read/2025-07-29/20250729_162542_915795_PostToolUse_Read.json",
    "log_dir": "/Users/bdmorin/src/claude-hooks/eyelet-hooks/PostToolUse/Read/2025-07-29",
    "project_dir": "/Users/bdmorin/src/claude-hooks"
  },
  "execution": {
    "status": "success",
    "duration_ms": 3,
    "output_data": {
      "action": "logged"
    },
    "error_message": null
  },
  "completed_at": "2025-07-29T16:25:42.919785"
}